= Welcome to the Scoped Search Demo Application
This software is all about demonstrating the capabilities and usage of the 'scoped_search' plugin http://github.com/wvanbergen/scoped_search.
The socped_search is a Rails plugin that let a user easily search ActiveRecord models with a simple query language using a named scope. The scoped search can be used by the programmer as well as the end user. It includes a syntax auto completer to get the end users familiar with the query syntax.

== The Application, step by step
The demo application has two pages hosts and packages, a host has many packages and packages  belongs to a host. In each page there is a search bar at the top to allow the user to search for host and packages.
=== Gem requirements
Scoped search runs on both Rails 2 and 3.
=== javascript and css files
 The GUI part of the plugin can use Prototype or JQuery java-script library.
If you are using JQuery you'll need 'jquery.js' and 'jquery-ui.js' in the 'public/javascript' folder. You can find more info about JQuery here:
*  http://jquery.com/
*  http://jqueryui.com/demos/autocomplete/

Style sheets files are in the folder to the *public/stylesheets* folder on your app.  The styles that begin with .auto_complete are the ones that set the auto-completer widget style.

=== Include the java script and style sheet files on your layout
On *app/views/layouts/application.html.erb* you should include the needed javascript files  for example you can use the following lines
  <%= javascript_include_tag "jquery.min.js", "jquery-ui-1.8.9.custom.min.js" %>
  <%= stylesheet_link_tag 'jquery-ui-1.8.9.custom.css' %>

=== The models
In the model you should define the searchable objects and how they will be used in the search language.
In the Host model you can find the following lines:
  scoped_search :on => :name, :complete_value => true
  scoped_search :on => :created_at, :only_explicit => true
  scoped_search :on => :memory, :only_explicit => true, :complete_value => true
  scoped_search :in => :packages, :on => :name, :complete_value => true, :rename => 'packages.name'.to_sym
  scoped_search :in => :packages, :on => :version, :only_explicit => true, :complete_value => true , :rename => 'packages.version'.to_sym

The :on mark the column name in the database, :in specify relation, :only_explicit exclude a search term from the free text search.
The :complete_value make the auto completer suggest values to the user, :rename will rename the search term.
Renaming some items to have the same beginning and have a dot in the name as demonstrated by 'packages.name' and 'packages.version'
will make the auto completer suggest just 'packages' for both to make the suggestion list shorter, ones the user type 'packages.' it
will complete the rest of the options (e.g. 'name' and 'version' in this example)

=== The Controllers
The following two methods are used for showing the filtered list of hosts and auto-complete the search syntax.

  #get list of hosts filtered by the search term
  def index
    @hosts = Host.search_for(params[:search], :order => params[:order])
    flash.clear
  rescue ScopedSearch::QueryNotSupported => e
    flash[:error] = e.to_s
    @hosts = Host.all
  end

  #get the syntax auto-complete suggestions
   def auto_complete_search
    begin
      @items = Host.complete_for(params[:search])
    rescue ScopedSearch::QueryNotSupported => e
      @items = e.to_s
    end
    #replace the following lines when working with prototype
    render :json => @items
#   render :inline => "<%= auto_complete_result @items  %>"
  end

=== The Views
The following code is located in *views/common/_searchbox.html.erb* and it's the code that includes the search bar
in the demo application

    <% form_tag eval("#{controller_name}_path"), :method => "get" do %>
      <%#= replace the following lines to work with prototype %>
      <%#= auto_complete_field_tag(:search, params[:search], {},{ :frequency => 0.1, :min_chars => -1 }) %>
      <%= auto_complete_field_tag_jquery(:search, params[:search], {},{ :frequency => 0.1, :min_chars => -1 }) %>
      <%= submit_tag 'Search' %>
        <hr>
    <% end -%>


The following code in the *views/hosts/index.html.erb* is the code for adding the sort links at the top of each column.
    <th><%= sort :name %></th>
    <th><%= sort :memory %></th>
    <th><%= sort :created_at, :as => 'Created' %></th>

=== Routs
The following lines needs to be added to the *config/locales/routs.rb* file
  resources :packages do
    get :auto_complete_search, :on => :collection
  end

  resources :hosts do
    get :auto_complete_search, :on => :collection
  end